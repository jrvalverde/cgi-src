#!/usr/bin/perl -- -*-perl-*-

# ------------------------------------------------------------
#
# ------------------------------------------------------------

# This is required for bidirectional communication with Fasta (which we
# expect to help maintain the connection alive during the work process
# require 'Comm.pl';

$ENV{'FASTLIBS'} = '/data/gen/fastadb/FASTLIBS'; 
$readseqprog = '/opt/molbio/bin/readseq';
$fastaexec = '/opt/molbio/fasta/bin';
$mailprog = '/usr/sbin/sendmail';
$tmpbase = '/tmp';
$htmlbglogo = 'http://www.es.embnet.org/images/backgrounds/EMBnetCNB.gif';

# This should be set to the address (in URL form) and name of the
# local bioinformatics administrator.
#$mailaddr = 'mailto:genadmin@es.embnet.org';
$mailaddr = 'http://www.es.embnet.org/cgi-bin/emailto?Bioinformatics+Administrator';
$contactaddr = 'Bioinformatics Administrator';

#open(STDERR, ">&STDOUT");
select(STDERR); $| = 1;     # make unbuffered
select(STDOUT); $| = 1;

# Get the input
read(STDIN, $buffer, $ENV{'CONTENT_LENGTH'});
# Split the name-value pairs
@pairs = split(/&/, $buffer);

#@pairs = split(/&/, $ENV{'QUERY_STRING'});

foreach $pair (@pairs)
{
    ($name, $value) = split(/=/, $pair);

    # Un-Webify plus signs and %-encoding
    $value =~ tr/+/ /;
    $value =~ s/%([a-fA-F0-9][a-fA-F0-9])/pack("C", hex($1))/eg;

    # Stop people from using subshells to execute commands
    # Not a big deal when using sendmail, but very important
    # when using UCB mail (aka mailx).
     $value =~ s/~!/ ~!/g; 

    # Uncomment for debugging purposes
    # print "Setting $name to $value<P>";

    $FORM{$name} = $value;
}

# Start printing ASAP. This way te browser will start transfer soon
# and the user will notice his browser getting data.
#
# Print out a content-type for HTTP/1.0 compatibility
print "Content-type: text/html\n\n";
print "<HTML>\n<HEAD><TITLE>FASTA results</TITLE></HEAD>\n";
print "<BODY BGCOLOR=\"white\" BACKGROUND=\"$htmlbglogo\">\n";

&nosequence unless $FORM{'sequence'};
&noseqtype unless $FORM{'seqtype'};
&nodb unless $FORM{'db'};
&badaddress unless $FORM{'username'};

$sequence = $FORM{'sequence'} if $FORM{'sequence'};

if ($FORM{'seqtype'} =~ /n/) {
    $res = '-n';
} else {
    $res = '';
}

if ($FORM{'db'} =~ /[buv]/) {
    $dbtype = 'P';
} elsif ($FORM{'db'} =~ /[acdefghijklmnopqrst]/) {
    $dbtype = 'N';
} else {
#    &nodb;
}
$db = $FORM{'db'};

#select program to run:
if ($FORM{'seqtype'} =~ /n/ ) {
    if ($dbtype =~ /N/) {
    	$program='fasta3';
    } else {
    	$program='fastx3';
    }
} else {
    if ($dbtype =~ /P/) {
    	$program='fasta3';
    } else {
    	$program='tfasta3';
    }
}

# Check user address that will receive the results
&badaddress unless $FORM{'username'};
$remotehost = $FORM{'username'};
#  print "prev: $remotehost<BR>\n";
&badaddress unless $remotehost =~ /.*@.*\..*/;
$remotehost =~ s/.*@//g;
#  print "host: $remotehost<BR>\n";
#  $h = gethostbyname($remotehost);
#  print "after: $h<BR>\n";
#  foreach my $item (gethostbyname($remotehost)) {
#      print "$item<BR>\n";
#  }
&badaddress unless gethostbyname($remotehost);

# Print calling parameters (some of them are TTY text).
print "<HR>\n";
#print "<H2>Called with:</H2>\n<P>$ENV{'QUERY_STRING'}</P>\n";
#print "<H2>Called with:</H2>\n<P>$buffer</P>\n";
print "<CENTER><H1><FONT COLOR=\"gray\">Thanks for using FASTA</FONT></H1></CENTER>\n";
print "<HR>\n<H2>Your "; 
if ($FORM{'seqtype'} =~ /n/) {
    print "nucleic acid ";
} else {
    print "protein ";
}
print "sequence was:</H2>\n<FONT COLOR=\"Blue\">";
print "<PRE><TT>\n";
print $sequence;
print "\n</TT></PRE></FONT>\n";
print "<H2>Searching against a";
if ($dbtype =~ /P/) {
   print "n amino acid ";
} else {
   print " nucleic acid ";
}
print "database</H2>\n";
print "<H2><FONT COLOR=\"Green\">Using program $program</FONT></H2>\n";
# for possible BATCH output
#print "<P>|$readseqprog -p -ffasta -a | $fastaexec/$program -q $res @ $db</P>\n";

# OK, let's go and do the real thing interactively.
# Create a temporary directory.
umask 000;
srand;
$tmpdir = sprintf "%s.%d.%d", "$tmpbase/xfasta", $$, int(rand(30000));
die "<H1>ERROR, HORROR: cannot create neccessary temporary files</H1>\n" 
unless mkdir $tmpdir, 0775;
chdir $tmpdir or die "<H1>ERROR, HORROR: cannot access needed temporary files</H1>\n";
# Create the sequence input file
open (INFILE, "|$readseqprog -p -ffasta -a -o=infile");
print INFILE $FORM{'sequence'};
close (INFILE);

print "<H2>Search sequence (in FASTA format) will be:</H2>\n";
print "<FONT COLOR=\"Magenta\"><PRE><TT>\n";
open (SEQ, "infile");
while (<SEQ>) {
	print "$_";
}
print "</TT></PRE></FONT>";

#open CMD, "|batch";
#print CMD<<ENDCMD;
##!/bin/sh
#cd $tmpdir
#export FASTLIBS=$ENV{'FASTLIBS'}
#$fastaexec/$program $res infile $db | $mailprog $FORM{'username'}
#cd /
#rm -rf $tmpdir
#ENDCMD
#close CMD;

open CMDFILE, ">cmdfile";
print CMDFILE<<ENDCMD;
#!/bin/sh
cd $tmpdir
export FASTLIBS=/data/gen/fastadb/FASTLIBS
$fastaexec/$program $res infile $db | $mailprog $FORM{'username'}
cd /
/bin/rm -rf $tmpdir
ENDCMD
close CMDFILE;

# This could be used instead of "batch"
system "at -f $tmpdir/cmdfile now";

print "\n</FONT>\n<H2>Results will be mailed to $FORM{'username'}</H2>\n";
print "</BODY>\n";
print "<HR>\n";
print "<CENTER><TABLE BORDER=0 WIDTH=90%><TR>\n";
print "<TD><A HREF=\"http://www.es.embnet.org/Copyright-CSIC.es.html\">\&copy; EMBnet/CNB</A></TD>\n";
print "<TD ALIGN=RIGHT><A HREF=\"$mailaddr\"><EM>$contactaddr</EM></A></TD>\n";
print "</TR></TABLE></CENTER>\n";
print "</HTML>\n";

exit;

#--------------------------------------------------------------------
# Subroutines
#--------------------------------------------------------------------

sub nosequence {
    print <<ENDNOSEQUENCE;
<H2>Sorry, you did not specify a probe sequence. Please, make sure
you are correctly filling the form.</H2>
ENDNOSEQUENCE
    exit;
}

sub noseqtype {
    print <<ENDNOSEQTYPE;
<H2>Sorry, you did not specify the type of your sequence. Please, make sure
you are correctly filling the form.</H2>
ENDNOSEQTYPE
    exit;
}

sub nodb {
    print <<ENDNODB;
<H2>Sorry, you did not specify a database to search. Please, make sure
you are correctly filling the form.</H2>
ENDNODB
    exit;
}

sub badaddress {
    print "<H2>Sorry, your request could not be processed:\n";
    print "your address seems to be incorrect. Please, review\n";
    print "your address or contact your system administrator\n";
    print "and try again</H2>\n";
    exit;
}
