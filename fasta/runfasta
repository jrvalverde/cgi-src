#!/usr/local/bin/perl -- -*-perl-*-
# That should have been the location of your perl5 executable!
# E.g. on OpenBSD
#!/usr/bin/perl -- -*-perl-*-

# ------------------------------------------------------------
#
#   Run FASTA with parameters gathered from the appropriate
# form.
#   Requires FASTA and READSEQ
#   Decides which FASTA program to run from the types of the
# input sequence and the search database.
#   Runs the program as a batch job and returns the results
# by e-mail: an abuse condition is therefore possible by
# malignant crooks.
#   If you have a fast-enough system you may wish to use the
# interactive version... I haven't one.
#
#   (C) José R. Valverde
#   	EMBnet/CNB  29-May-2000
#
# $Log: runfasta,v $
# Revision 1.3  2005/04/12 14:30:20  root
# Updated to run on SuSe Linux at Nemesis [j]
#
# Revision 1.2  2002/02/13 10:24:38  netadmin
# Added sound to error messages [j]
#
# Revision 1.1  2000/05/29 15:35:26  netadmin
# Initial revision
#
# ------------------------------------------------------------

$ENV{'FASTLIBS'} = '/data/gen/fastadb/FASTLIBS'; 
$readseqprog = '/opt/molbio/bin/readseq';
$fastaexec = '/opt/database/fasta/bin';
$mailprog = '/usr/bin/Mail';
$tmpbase = '/tmp';
$htmlbglogo = '/images/backgrounds/EMBnetCNB.gif';

# This should be set to the address (in URL form) and name of the
# local bioinformatics administrator.
#$contact_url = 'mailto:genadmin@es.embnet.org';
$contact_url = '/cgi-bin/emailto?Bioinformatics+Administrator';
$contact_addr = 'Bioinformatics Administrator';

#open(STDERR, ">&STDOUT");
select(STDERR); $| = 1;     # make unbuffered
select(STDOUT); $| = 1;

# Get the input
read(STDIN, $buffer, $ENV{'CONTENT_LENGTH'});
# Split the name-value pairs
@pairs = split(/&/, $buffer);

#@pairs = split(/&/, $ENV{'QUERY_STRING'});

foreach $pair (@pairs)
{
    ($name, $value) = split(/=/, $pair);

    # Un-Webify plus signs and %-encoding
    $value =~ tr/+/ /;
    $value =~ s/%([a-fA-F0-9][a-fA-F0-9])/pack("C", hex($1))/eg;

    # Stop people from using subshells to execute commands
    # Not a big deal when using sendmail, but very important
    # when using UCB mail (aka mailx).
     $value =~ s/~!/ ~!/g; 

    # Uncomment for debugging purposes
    # print "Setting $name to $value<P>";

    $FORM{$name} = $value;
}

# Start printing ASAP. This way te browser will start transfer soon
# and the user will notice his browser getting data.
#
# Print out a content-type for HTTP/1.0 compatibility
print "Content-type: text/html\n\n";
print "<HTML>\n<HEAD><TITLE>FASTA results</TITLE></HEAD>\n";
print "<BODY BGCOLOR=\"white\" BACKGROUND=\"$htmlbglogo\">\n";

&nosequence unless $FORM{'sequence'};
&noseqtype unless $FORM{'seqtype'};
&nodb unless $FORM{'db'};
&badaddress unless $FORM{'username'};
# wapmail is optional

$sequence = $FORM{'sequence'} if $FORM{'sequence'};

if ($FORM{'seqtype'} =~ /n/) {
    $res = '-n';
} else {
    $res = '';
}

$db = $FORM{'db'};
# See what kind of database we are searching against
#
#if ($FORM{'db'} =~ /[buv]/) {
#    $dbtype = 'P';
#} elsif ($FORM{'db'} =~ /[acdefghijklmnopqrst]/) {
#    $dbtype = 'N';
#} else {
#    &nodb;
#}
#
# Test against FASTLIBS
open (LIBS, $ENV{'FASTLIBS'});
$dbtype = '#';
while (<LIBS>) {
    $line = $_;
    if ( $line =~ /\$1$db/ ) {
    	$dbtype = 'N';
    }
    if ( $line =~ /\$0$db/ ) {
    	$dbtype = 'P';
    }
}
close (LIBS);
if ( $dbtype =~ /#/ ) {
    &nodb;
}

#select program to run:
if ($FORM{'seqtype'} =~ /n/ ) {
    if ($dbtype =~ /N/) {
    	$program='fasta34';
    } else {
    	$program='fastx34';
    }
} else {
    if ($dbtype =~ /P/) {
    	$program='fasta34';
    } else {
    	$program='tfasta34';
    }
}

# Check user address that will receive the results
&badaddress unless $FORM{'username'};
&badaddress unless $FORM{'username'} =~ /.*@.*\..*/;
$remotehost = $FORM{'username'};
$remotehost =~ s/.*@//g;
#print "host: $remotehost<BR>\n";
#$host = gethostbyname($remotehost)[0];
#foreach my $item (gethostbyname($remotehost)) {
#    print "$item<BR>\n";
#}
&badaddress unless gethostbyname($remotehost);

if ( $FORM{'wapmail'} ) {
    &badwap unless $FORM{'wapmail'} =~ /.*@.*\..*/;
    $waphost = $FORM{'wapmail'};
    $waphost =~ s/.*@//g;
    &badwap unless gethostbyname($remotehost);
    $wapaddress = $FORM{'wapmail'};
}
else {
    $wapaddress = $FORM{'username'};
}

# Print calling parameters (some of them are TTY text).
#print "<HR>\n";
#print "<H2>Called with:</H2>\n<P>$ENV{'QUERY_STRING'}</P>\n";
#print "<H2>Called with:</H2>\n<P>$buffer</P>\n";
#print "\n</TT></PRE>\n";
print "<CENTER><H1><FONT COLOR=\"gray\">Thanks for using FASTA</FONT></H1></CENTER>\n";
print "<HR>\n<H2>Your "; 
if ($FORM{'seqtype'} =~ /n/) {
    print "nucleic acid ";
} else {
    print "protein ";
}
print "sequence was:</H2>\n<FONT COLOR=\"Blue\">";
print "<PRE><TT>\n";
print $sequence;
print "\n</TT></PRE></FONT>\n";
print "<H2>Searching against a";
if ($dbtype =~ /P/) {
   print "n amino acid ";
} else {
   print " nucleic acid ";
}
print "database</H2>\n";
print "<H2><FONT COLOR=\"Green\">Using program $program</FONT></H2>\n";
# for possible BATCH output
print "<FONT COLOR=\"Magenta\">\n";
#print "<P>|$readseqprog -p -ffasta -a | $fastaexec/$program -q $res @ $db</P>\n";

# OK, let's go and do the real thing interactively.
# Create a temporary directory.
umask 0077;
srand;
$tmpdir = sprintf "%s.%d.%d", "$tmpbase/xfasta", $$, int(rand(30000));
die "<H1>ERROR, HORROR: cannot create neccessary temporary files</H1>\n" 
unless mkdir $tmpdir, 0775;
chdir $tmpdir or die "<H1>ERROR, HORROR: cannot access needed temporary files</H1>\n";
# Create te sequence input file
open (INFILE, "|$readseqprog -p -ffasta -a -o=infile");
print INFILE $FORM{'sequence'};
close (INFILE);

print "<H2>Search sequence (in FASTA format) will be:</H2>\n";
print "<FONT COLOR=\"Magenta\"><PRE><TT>\n";
open (SEQ, "infile");
while (<SEQ>) {
	print "$_";
}
print "</TT></PRE></FONT>";

#open CMD, "|batch";
#print CMD<<ENDCMD;
##!/bin/sh
#cd $tmpdir
#export FASTLIBS=$ENV{'FASTLIBS'}
#$fastaexec/$program $res infile $db | $mailprog $FORM{'username'}
#cd /
#rm -rf $tmpdir
#ENDCMD
#close CMD;

open CMDFILE, ">cmdfile";
print CMDFILE<<ENDCMD;
#!/bin/sh
cd $tmpdir
FASTLIBS=$ENV{'FASTLIBS'}
export FASTLIBS
#
# it would be nice to check the input file for validity, and
# we might send output to a file instead, adding a suitable header
# and checking its contents for successful runs. Oh, well, I'll
# have to do it sooner or later, I fear. OTOH that'd consume too
# much space. So?
#
$fastaexec/$program $res infile $db | $mailprog -s fasta $FORM{'username'}

cat > wap.msg << ENDWAP


Your fasta job has ended

ENDWAP
$mailprog -s fasta $wapaddress < wap.msg

cd /
/bin/rm -rf $tmpdir
ENDCMD
close CMDFILE;

#print "<p>$tmpdir</p>";

# This could be used instead of "batch" in IRIX systems
#system "at -f $tmpdir/cmdfile -q b now";
# queue 'c' is defined as c.5j15n90w in our /usr/lib/cron/queuedefs
#	i.e. 5 simultaneous jobs with a nice value of 15
# Alternately, in OpenBSD systems, you may use
system "at -f $tmpdir/cmdfile now";


print "\n</FONT>\n<H2>Results will be mailed to $FORM{'username'}</H2>\n";
print "</BODY>\n";
print "<HR>\n";
print "<CENTER><TABLE BORDER=0 WIDTH=90%><TR>\n";
print "<TD><A HREF=\"http://www.es.embnet.org/Copyright-CSIC.html\">\&copy; EMBnet/CNB</A></TD>\n";
print "<TD ALIGN=RIGHT><A HREF=\"$contact_url\"><EM>$contact_addr</EM></A></TD>\n";
print "</TR></TABLE></CENTER>\n";
print "</HTML>\n";

exit;

#--------------------------------------------------------------------
# Subroutines
#--------------------------------------------------------------------

sub nosequence {
    print "<EMBED src=\"/sounds/thehell3.wav\" width=0 height=2  AUTOSTART=TRUE><BGSOUND SRC=\"/sounds/thehell3.wav\">";
    print <<ENDNOSEQUENCE;
<H2>Sorry, you did not specify a probe sequence. Please, make sure
you are correctly filling the form.</H2>
ENDNOSEQUENCE
    exit;
}

sub noseqtype {
    print "<EMBED src=\"/sounds/thehell3.wav\" width=0 height=2  AUTOSTART=TRUE><BGSOUND SRC=\"/sounds/thehell3.wav\">";
    print <<ENDNOSEQTYPE;
<H2>Sorry, you did not specify the type of your sequence. Please, make sure
you are correctly filling the form.</H2>
ENDNOSEQTYPE
    exit;
}

sub nodb {
    print "<EMBED src=\"/sounds/thehell3.wav\" width=0 height=2  AUTOSTART=TRUE><BGSOUND SRC=\"/sounds/thehell3.wav\">";
    print <<ENDNODB;
<H2>Sorry, you did not specify a database to search. Please, make sure
you are correctly filling the form.</H2>
ENDNODB
    exit;
}

sub badaddress {
    print "<EMBED src=\"/sounds/thehell3.wav\" width=0 height=2  AUTOSTART=TRUE><BGSOUND SRC=\"/sounds/thehell3.wav\">";
    print "<H2>Sorry, your request could not be processed:\n";
    print "your address seems to be incorrect. Please, review\n";
    print "your address or contact your system administrator\n";
    print "and try again</H2>\n";
    exit;
}

sub badwap {
    print "<EMBED src=\"/sounds/thehell3.wav\" width=0 height=2  AUTOSTART=TRUE><BGSOUND SRC=\"/sounds/thehell3.wav\">";
    print "<H2>Sorry, your request could not be processed:\n";
    print "your urgent (WAP?) address seems to be incorrect. Please, review\n";
    print "your urgent address or contact your mobile provider\n";
    print "and try again</H2>\n";
    exit;
}
