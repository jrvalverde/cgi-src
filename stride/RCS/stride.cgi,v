head	1.3;
access;
symbols;
locks; strict;
comment	@# @;


1.3
date	2004.11.16.13.52.00;	author root;	state Exp;
branches;
next	1.2;

1.2
date	2002.02.06.10.46.26;	author netadmin;	state Exp;
branches;
next	1.1;

1.1
date	2002.02.06.10.12.40;	author netadmin;	state Exp;
branches;
next	;


desc
@A simple CGI to run STRIDE [jr]
@


1.3
log
@Stride CGI
@
text
@#!/usr/local/bin/perl
# stride.cgi
#
# ------------------------------------------------------------
# stride.pl, by José R. Valverde (jrvalverde@@es.embnet.org).
#
# Created: February 6th, 2002
# Last updated: February 6th, 2002
#
# STRIDE.CGI provides a simplified mechanism to run STRIDE
# over the web.
# ------------------------------------------------------------
# This package is Copyright 2002 by José R. Valverde
#
# $Id: stride.cgi,v 1.2 2002/02/06 10:46:26 netadmin Exp netadmin $
# $Log: stride.cgi,v $
# Revision 1.2  2002/02/06 10:46:26  netadmin
# Minor changes [j]
#
# 

use CGI;

#$debug= 1;

$babel=        "/opt/structure/bin/babel"; 
$apptitle=     "STRIDE";
$applongtitle= "Molecular Structure Analysis";
$babel_dir=    "/opt/structure/babel";
$stride=       "/opt/structure/bin/stride";
$molscript=    "/opt/structure/bin/molscript";
$serverpath=   "/data/www/EMBnet";  	## $ENV{'DOCUMENT_ROOT'};
$httptmp=      "/tmp/";  	    	## inside serverpath

$maintainer =  "netadmin\@@es.embnet.org";

$dir            ="stride$$";
$workdir        =$serverpath . $httptmp . $dir ;
$fn             = "stride";
#input file
$inuri  	= $httptmp . $dir . "/" . $fn . ".in";
$infile 	= $serverpath . $inuri;
#PDB file
$pdburi  	= $httptmp . $dir . "/" . $fn . ".pdb";
$pdbfile 	= $serverpath . $pdburi;
#output file
$outuri 	= $httptmp . $dir . "/"  . $fn . ".out";
$outfile 	= $serverpath . $outuri;
#molscript file
$msuri 	= $httptmp . $dir . "/"  . $fn . ".ms";
$msfile 	= $serverpath . $msuri;
#summary file
$sumuri         = $httptmp . $dir . "/"  . $fn . ".sum";
$sumfile        = $serverpath . $sumuri;
#hydrogen bonds
$hburi         = $httptmp . $dir . "/"  . $fn . ".hb";
$hbfile        = $serverpath . $hburi;
#fasta sequence
$fasuri         = $httptmp . $dir . "/"  . $fn . ".fas";
$fasfile        = $serverpath . $fasuri;
#molscript PS output
$psuri         = $httptmp . $dir . "/"  . $fn . ".ps";
$psfile        = $serverpath . $psuri;
#molscript vrml-2.0 output
$vruri         = $httptmp . $dir . "/"  . $fn . ".wrl";
$vrfile        = $serverpath . $vruri;


$iformatopts= "";
$infileopts= " $infile ";
$outfileopts= " $outfile ";
$oformatopts= " -opdb";     # Make BABEL produce a PDB file
$useropts = "";

$query = new CGI;

print $query->header;
print $query->start_html($apptitle);
print "<CENTER><H2>$applongtitle</H2></CENTER>\n";

&do_work($query);
&print_tail;

print $query->end_html;

exit;
##/////////////////////////////////////////////

sub getHttpServerUrl  {
	my $host= $ENV{"SERVER_NAME"};
	my $port= $ENV{"SERVER_PORT"};
	if ($port==80 || $port==0) { return "http://" . $host; }
	else { return "http://" . $host . ':' . $port; }
}


sub do_work {
	my($query) = @@_;
	my(@@values,$val,$key);
	my $havein = 0;
	my $havemail = 0;

    	# 1. Create working dir and cd to it
	die "<H1>ERROR, HORROR: cannot create neccessary temporary files</H1>\n" 
    	unless mkdir $workdir, 0777;
	chdir $workdir or die 
	"<H1>ERROR, HORROR: cannot access needed temporary files</H1>\n";

 	foreach $key ($query->param) {
  	    
  	  $val = $query->param($key); ## @@values =  
   	  $useropts .= " " . $val if ($val =~ /^-/);
   	  
   	  if ($key =~ /^infile/ && $val) {
	        ## The user selected a local input file
   	  	open(INF,">$infile");
				while (<$val>) { tr/\r/\n/; print INF $_;  $havein= 1; }
				close(INF);
   	  	}
   	  elsif ($key =~ /^indata/ && $val && !$havein ) {
   	  	## The user entered the data directly
		## Takes precedence over selected file.
   	  	$val =~ tr/\r/\n/;
   	  	open(INF,">$infile");
				print INF $val; 
				close(INF);
   	  	$havein= 1;
   	  	}
   	  elsif ($key =~ /^informat/ && $val) {
   	  	$iformatopts .= " -i" . $val;
   	  	}
	} # foreach $key
		
	if ($havein) { &runApp($useropts); }
	else { 
 		print "<H3>No input data found</H3>";
		}

	print "<P>\n";
	
	return if (!$debug);

 	print "<H2>Here are the current settings in this form</H2>";
 	foreach $key ($query->param) {
		print "<STRONG>$key</STRONG> -> ";
		@@values = $query->param($key);
		print join(", ",@@values),"<BR>\n";
		}

	$filename = $query->param('infile');
	if ($filename) {
		print "uploaded file '$filename'<br>\n";
		print "info<br>\n";

	  my %info= %{$query->uploadInfo($filename)};
    	  foreach $key (keys %info) {
            print "<B>$key</B> -> ";
            my $val = $info{$key};
            print "$val<BR>\n";
	   }
    	} # end DEBUG
}


sub runApp {
	local($useropts)= @@_;

	$|= 1; # flush


	print  "<CENTER><BR><STRONG>Running: BABEL + STRIDE</STRONG><BR></CENTER>\n";
	print <<ENDDONE1;
	&nbsp;<BR>
	<TABLE WIDTH="80%" BGCOLOR="white" ALIGN="CENTER" BORDER="2" 
        CELLSPACING="1" CELLPADDING="5" >
	<TR><TD>
	Your job has been started in our server.</STRONG></TT>
	</TD></TR></TABLE>
ENDDONE1
	# Convert to PDB format if needed
	#
	#	For some reason BABEL gives problems converting to TINKER
	# directly: convert first to PDB and then to TINKER.
	#
	if ( $iformatopts =~ / -ipdb$/ ) {
    	    # no need to use babel
	    system("cp $infile $pdbfile");
	} else {
	    $ENV{'BABEL_DIR'} = $babel_dir;
	    system ("$babel $iformatopts $infileopts $oformatopts $pdbfile");
   	}

	# analyze structure:
	##  1. general analysis
	system("$stride -f$outfile -m$msfile $pdbfile");
	##  2. generate molscript file
	#system("$stride -m$msfile $pdbfile 2> /dev/null");
    	##  3. generate summary file
	system("$stride -o $pdbfile > $sumfile 2> /dev/null");
	##  4. generate hydrogen bonds
	system("$stride -h $pdbfile > $hbfile 2> /dev/null");
	##  5. generate FASTA sequence
	system("$stride -q$fasfile $pdbfile");
	##  6. generate molscript PS file
	system("$molscript -ps < $msfile > $psfile 2> /dev/null");
	##  7. generate molscript VRML-2 file
	system("$molscript -vrml < $msfile > $vrfile 2> /dev/null");
	
	&print_report;

    	# WE DON'T DELETE THE FILES. A CRON JOB WILL DO IT ONE DAY LATER

}

sub print_report {
    print "<CENTER><H2>Here are your results</H2></CENTER>";
    print "<TABLE BORDER=\"2\">";
    if (-f $infile) {
	print "<TR><TD><I>Your input data was</I> </TD><TD><A HREF=\"$inuri\">INPUT</A></TD></TR>\n";
    }
    if (-f $pdbfile) {
	print "<TR><TD><I>Your data in PDB format</I> </TD><TD><A HREF=\"$pdburi\">PDB</A></TD></TR>\n";
    }
    if (-f $sumfile) {
	print "<TR><TD><I>Secondary structure summary</I> </TD><TD><A HREF=\"$sumuri\">SUMMARY</A></TD></TR>\n";
    }
    if (-f $outfile) {
	print "<TR><TD><I>Detailed secondary structure analysis</I> </TD><TD><A HREF=\"$outuri\">DETAILS</A></TD></TR>\n";
    }
    if (-f $hbfile) {
	print "<TR><TD><I>Hydrogen Bonds</I> </TD><TD><A HREF=\"$hburi\">HB</A></TD></TR>\n";
    }
    if (-f $fasfile) {
	print "<TR><TD><I>Protein sequence in FASTA format</I> </TD><TD><A HREF=\"$fasuri\">FASTA SEQ</A></TD></TR>\n";
    }
    if (-f $psfile) {
	print "<TR><TD><I>A PostScript view</I> </TD><TD><A HREF=\"$psuri\">PS</A></TD></TR>\n";
    }
    if (-f $vrfile) {
	print "<TR><TD><I>A Virtual Reality view</I> </TD><TD><A HREF=\"$vruri\">VRML2</A></TD></TR>\n";
    }
    print "</TABLE>";
    print "<BR><HR>";
    print "<CENTER><H3>Your results will be kept for one day and deleted afterwards</H3></CENTER>";
    print "<BR>";
}

sub print_tail {
   print <<END;
<HR>

<TABLE WIDTH="100%">
  <TR ><TD ALIGN=CENTER>
    <P>If you have any trouble, please contact our
    <A HREF="/cgi-bin/emailto?Bioinformatics+Administrator">Bioinformatics
    Administrator</A></P>
    <P><A HREF="/Copyright-CSIC.html">&copy; EMBnet/CNB</A></P>
  </TD></TR>
</TABLE>
END
}

sub blank_response {
    print "<H2>Some fields appear to be blank or incorrect, and thus your\n";
    print "job has <B>not</B> been processed.";
    print "Please, go back and re-enter your data.</H2>";
    exit;
}


@


1.2
log
@Minor changes [j]
@
text
@d15 5
a19 2
# $Id$
# $Log$
d178 1
a178 1
	</TD>
@


1.1
log
@Initial revision
@
text
@d196 1
a196 1
	system("$stride -o $pdbfile > $sumfile");
d198 1
a198 1
	system("$stride -h $pdbfile > $hbfile");
@
