#!/usr/local/bin/perl -- -*-perl-*-
# That should have been the location of your perl5 executable!
# E.g. on OpenBSD
#!/usr/bin/perl -- -*-perl-*-

# ------------------------------------------------------------
#
#   Run FASTA with parameters gathered from the appropriate
# form.
#   Requires FASTA and READSEQ
#   Decides which FASTA program to run from the types of the
# input sequence and the search database.
#   Runs the program as a batch job and returns the results
# by e-mail: an abuse condition is therefore possible by
# malignant crooks.
#   If you have a fast-enough system you may wish to use the
# interactive version... I haven't one.
#
#   (C) José R. Valverde
#   	EMBnet/CNB  29-May-2000
#
# $Log: runfasta,v $
# Revision 1.1  2000/05/29 15:35:26  netadmin
# Initial revision
#
# ------------------------------------------------------------

$mailprog = '/usr/lib/sendmail';
$tmpbase = '/tmp';
$htmlbglogo = '/images/backgrounds/EMBnetCNB.gif';

# This should be set to the address (in URL form) and name of the
# local bioinformatics administrator.
#$contact_url = 'mailto:genadmin@es.embnet.org';
$contact_url = '/cgi-bin/emailto?Bioinformatics+Administrator';
$contact_addr = 'Bioinformatics Administrator';

#open(STDERR, ">&STDOUT");
select(STDERR); $| = 1;     # make unbuffered
select(STDOUT); $| = 1;

# Get the input
read(STDIN, $buffer, $ENV{'CONTENT_LENGTH'});
# Split the name-value pairs
@pairs = split(/&/, $buffer);

#@pairs = split(/&/, $ENV{'QUERY_STRING'});

foreach $pair (@pairs)
{
    ($name, $value) = split(/=/, $pair);

    # Un-Webify plus signs and %-encoding
    $value =~ tr/+/ /;
    $value =~ s/%([a-fA-F0-9][a-fA-F0-9])/pack("C", hex($1))/eg;

    # Stop people from using subshells to execute commands
    # Not a big deal when using sendmail, but very important
    # when using UCB mail (aka mailx).
     $value =~ s/~!/ ~!/g; 

    # Uncomment for debugging purposes
    # print "Setting $name to $value<P>";

    $FORM{$name} = $value;
}

# Start printing ASAP. This way te browser will start transfer soon
# and the user will notice his browser getting data.
#
# Print out a content-type for HTTP/1.0 compatibility
print "Content-type: text/html\n\n";
print "<HTML>\n<HEAD><TITLE>Wake Me Up results</TITLE></HEAD>\n";
print "<BODY BGCOLOR=\"white\" BACKGROUND=\"$htmlbglogo\">\n";

&badhour unless $FORM{'hour'};
&badmins unless $FORM{'mins'};
&badmsg unless $FORM{'msg'};
&badaddress unless $FORM{'username'};

$hour = $FORM{'hour'} if $FORM{'hour'};
&badhour unless ($hour < 24) && ($hour >= 0);

$mins = $FORM{'mins'} if $FORM{'mins'};
&badmins unless ($mins < 60) && ($mins >= 0);

$msg = $FORM{'msg'} if $FORM{'msg'};

$address = $FORM{'username'} if $FORM{'username'};
&badaddress unless $FORM{'username'} =~ /.*@.*\..*/;
$remotehost = $FORM{'username'};
$remotehost =~ s/.*@//g;
#print "host: $remotehost<BR>\n";
#$host = gethostbyname($remotehost)[0];
#foreach my $item (gethostbyname($remotehost)) {
#    print "$item<BR>\n";
#}
&badaddress unless gethostbyname($remotehost);


print "<CENTER><H1><FONT COLOR=\"gray\">Thanks for using Wake Me Up</FONT></H1></CENTER>\n";
print "<HR>\n<H2>Your message will be delivered to"; 
print "<FONT COLOR=\"Blue\">$address</FONT>\n";
print "<HR>\n<H2>at time<FONT COLOR=\"Green\">$hour:$min</FONT></H2>\n";

# OK, let's go and do the real thing.
# Create a temporary directory.
umask 0077;
srand;
$tmpdir = sprintf "%s.%d.%d", "$tmpbase/wakemeup", $$, int(rand(30000));
die "<H1>ERROR, HORROR: cannot create neccessary temporary files</H1>\n" 
unless mkdir $tmpdir, 0775;
chdir $tmpdir or die "<H1>ERROR, HORROR: cannot access needed temporary files</H1>\n";
# Create te message input file
open (INFILE, "> message");
print INFILE "Subject: Wake Up call\n\n"
print INFILE "$msg";
close (INFILE);

$time = XXXXXX

open CMD, "|at $hour:$min";
print CMD<<ENDCMD;
##!/bin/sh
$sendmail $address < $tmpdir/message
ENDCMD
close CMD;

open CMDFILE, ">cmdfile";
print CMDFILE<<ENDCMD;
#!/bin/sh
cd $tmpdir
FASTLIBS=$ENV{'FASTLIBS'}
export FASTLIBS
#
# it would be nice to check the input file for validity, and
# we might send output to a file instead, adding a suitable header
# and checking its contents for successful runs. Oh, well, I'll
# have to do it sooner or later, I fear. OTOH that'd consume too
# much space. So?
#
$fastaexec/$program $res infile $db | $mailprog $FORM{'username'}
cd /
/bin/rm -rf $tmpdir
ENDCMD
close CMDFILE;

# This could be used instead of "batch" in IRIX systems
#system "at -f $tmpdir/cmdfile -q b now";
# queue 'c' is defined as c.5j15n90w in our /usr/lib/cron/queuedefs
#	i.e. 5 simultaneous jobs with a nice value of 15
# Alternately, in OpenBSD systems, you may use
system "at -f $tmpdir/cmdfile now";


print "\n</FONT>\n<H2>Results will be mailed to $FORM{'username'}</H2>\n";
print "</BODY>\n";
print "<HR>\n";
print "<CENTER><TABLE BORDER=0 WIDTH=90%><TR>\n";
print "<TD><A HREF=\"http://www.es.embnet.org/Copyright-CSIC.html\">\&copy; EMBnet/CNB</A></TD>\n";
print "<TD ALIGN=RIGHT><A HREF=\"$contact_url\"><EM>$contact_addr</EM></A></TD>\n";
print "</TR></TABLE></CENTER>\n";
print "</HTML>\n";

exit;

#--------------------------------------------------------------------
# Subroutines
#--------------------------------------------------------------------

sub badhour {
    print <<ENDNOH;
<H2>Sorry, you did not specify a valid hour. Please, make sure
you are correctly filling the form.</H2>
ENDNOH
    exit;
}

sub badmins {
    print <<ENDNOM;
<H2>Sorry, you did not specify a valid minute. Please, make sure
you are correctly filling the form.</H2>
ENDNOM
    exit;
}

sub badmsg {
    print <<ENDNOTXT;
<H2>Sorry, you did not specify a valid message.</H2>
ENDNOTXT
    exit;
}

sub badaddress {
    print "<H2>Sorry, your request could not be processed:\n";
    print "your address seems to be incorrect. Please, review\n";
    print "your address or contact your system administrator\n";
    print "and try again</H2>\n";
    exit;
}
